version: 2.1
orbs:
  ruby: circleci/ruby@1.1.0
  node: circleci/node@2
  browser-tools: circleci/browser-tools@1.1
executors:
  working_directory: ~/rememberyou
  ruby_and_postgres:
    docker:
      - image: cimg/ruby:3.0-browsers
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          PGHOST: 127.0.0.1
          PGUSER: user_name
          PGPASSWORD: ""
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: user_name
          POSTGRES_DB: db_name
          POSTGRES_PASSWORD: ""
jobs:
  rubocop:
    executor: ruby_and_postgres
    steps:
      - checkout
      # バンドル キャッシュを復元
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-
      - run:
          name: バンドル インストール
          command: |
            gem install bundler -v 2.4.6
            bundle install
      # バンドル キャッシュを保存
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      # Yarn の設定
      - restore_cache:
          keys:
            - rails-demo-yarn-{{ checksum "yarn.lock" }}
            - rails-demo-yarn-
      - run:
          name: Yarn のインストール
          command: yarn install --cache-folder ~/.cache/yarn
      # Yarn のキャッシュを保存
      - save_cache:
          key: rails-demo-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: run rubocop
          command: bundle exec rubocop
  test:
    executor: ruby_and_postgres
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
          node-version: '19.6.0'
          cache-key: "yarn.lock"
      - run: #コマンドの実行
          name: setup bundler #任意のrunの名前、バージョンを指定してBundlerをインストールする
          command: |
            gem install bundler:2.4.6
            bundle -v
      - restore_cache: #キャッシュがsave_cacheにより存在すればキャッシュをリストアする、ビルドタイム向上
          keys: #リストアするキャッシュの複数指定
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-
      - run: 
          name: bundle install
          command: | #パスの指定と依存のインストール
            bundle config set --local path 'vendor/bundle'
            bundle install
      - save_cache: #依存関係のキャッシュを指定パスに保存
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - restore_cache: #キャッシュがsave_cacheにより存在すればキャッシュを保持する、Yarnを使用する場合に必要
          keys: #リストアするキャッシュの複数指定
            - rails-demo-yarn-{{ checksum "yarn.lock" }}
            - rails-demo-yarn-
      - run:
          name: yarn install #Yarnパッケージのキャッシュ化
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache: #Yarnキャッシュの保存
          key: rails-demo-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: setup database #スキーマファイルからテーブル作成、--traceでfull_traceチェック
          command: bin/rails db:schema:load --trace
      - run: bundle exec bin/webpack
      # Rspec
      - run:
          name: Rspec
          command: bundle exec rspec

  deploy:
    executor: ruby_and_postgres
    steps:
      - checkout
      - run:
          name: 'Install Heroku CLI, if necessary'
          command: |
            if [[ $(command -v heroku) == "" ]]; then
              curl https://cli-assets.heroku.com/install.sh | sh
            else
              echo "Heroku is already installed. No operation was performed."
            fi
      - run:
          name: Deploy to Heroku_Production
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME_PRD.git HEAD:main
      - run:
          name: db migration
          command: |
            heroku run rails db:migrate --app ${HEROKU_APP_NAME_PRD}
workflows:
  version: 2
  build:
    jobs:
      - rubocop
      - test
      - deploy:
          requires:
            - rubocop
            - test
